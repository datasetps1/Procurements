@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Create";
}


<script src="~/lib/jquery/selectbox/dist/jquery-editable-select.js"></script>
<link href="~/lib/jquery/selectbox/dist/jquery-editable-select.css" rel="stylesheet" />


@*<script src="//code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="//rawgithub.com/indrimuska/jquery-editable-select/master/dist/jquery-editable-select.min.js"></script>
    <link href="//rawgithub.com/indrimuska/jquery-editable-select/master/dist/jquery-editable-select.min.css" rel="stylesheet">*@

<!-- Script -->

<style>

    .loader {
        position: fixed;
        top: 50%;
        left: 50%;
        margin-top: -50px;
        margin-left: -100px;
        height: 120px;
        width: 120px;
    }
</style>
<link href="~/css/FixedTable.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@9"></script>


<br />
<br />
<br />
<br />

<div class="row">

    <div id="loader" class="spinner-border text-warning loader" role="status" style="display:none;">
        <span class="sr-only">Loading...</span>
    </div>
    <div class="col-md-12">
        <form onkeydown="return event.key != 'Enter';">
            <input type="hidden" id="NumberOfDayesBefore" />
            <input type="hidden" id="NumberOfDayesAfter" />

            <div class="container card" style=" box-shadow: 0 0 10px 0 rgba(0, 0, 0, .1);">
                <div class="form-row" style="margin-top:15px ; ">
                    <h4 style="">@Localizer["Create OrderView"]</h4>

                </div>
                <div style="margin-top:-8px ; ">
                    <hr />
                </div>
                <div class="form-row" style="margin-top:-8px ; ">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group col-md-5">
                        <br />
                        <label for="inputState" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Order Type"]</label>
                        <select id="inputState3" class="form-control" name="headerLst">
                            <option selected></option>
                            @* asp-items="" *@
                            @foreach (OrderTypeClass ord in ViewBag.OrderType)
                            {
                                <option value="@ord.orderTypeCode">@ord.orderTypeName</option>
                            }


                        </select>
                        <span class="text-danger"></span>
                    </div>


                    @*<div class="form-group col-md-3">
                            <br />
                            <label for="inputState" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Department"]</label>
                            <select id="inputState1" class="form-control" name="headerLst">
                                <option selected></option>
                                @foreach (DepartmentClass dep in ViewBag.DepartmentName)
                                {
                                    <option value="@dep.departmentCode">@dep.departmentName</option>
                                }


                            </select>
                             asp-items=""

                            <span class="text-danger"></span>
                        </div>*@

                    <div class="form-group col-md-3">
                        <br />
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Department Name"]</label>
                        <input value="@ViewBag.UserDepartmentName" type="text" class="form-control" id="txtdep" disabled />
                        <span class="text-danger"></span>
                    </div>

                    <div class="form-group col-md-2">
                        <br />
                        <label for="inputState" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Currency"]</label>
                        <select id="cmbCurrency" class="form-control" name="headerLst">
                            <option selected></option>
                            @foreach (CurrencyViewModel item in ViewBag.Currency)
                            {
                                <option value="@item.currencyCode">@item.currencyName</option>
                            }
                        </select>

                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-2">
                        <br />
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["order date"]</label>
                        <input id="date" type="date" disabled class="form-control" value="@ViewBag.OrderDate.ToString("yyyy-MM-dd")" name="headerLst" style="width:162px ;" />

                        @*@{var x = @Convert.ToDateTime(@ViewBag.OrderDate).ToString("dd/MM/yyyy}");}
                            <input id="date" class="form-control" name="headerLst" value="@x" maxlength="10" type="date"  />*@


                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="row">

                    <div class="form-group col-md-3">

                        <label id="inputState2Lbl" for="inputState" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Project"]</label>
                        <select id="inputState2" class="form-control" name="headerLst">
                            <option selected></option>
                            @* asp-items="" *@
                            @foreach (CostsViewModel costs in ViewBag.ProjectName)
                            {
                                <option value="@costs.costCode">@costs.costName</option>
                            }
                        </select>
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-4" id="div1">
                        @*<label id="inputState4Lbl" for="inputState" style="@Localizer["text-align: left  ;direction: ltr;visibility:hidden"]">@Localizer["Budget Line"]</label>
                            <select id="inputState4" class="form-control" name="headerLst" style="visibility:hidden">
                                <option selected></option>

                                @foreach (CostsViewModel costs in ViewBag.BudgetLine)
                                {
                                    <option value="@costs.costCode">@costs.costName</option>
                                }


                            </select>*@
                    </div>
                    <div class="form-group col-md-3">
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Rate"]</label>
                        @* value="@ViewBag.Rate" *@
                        <input type="number" step="any" class="form-control" name="headerLst" id="rateText" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-2" style="margin-left: -12px;">

                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Expected Date"]</label>
                        @*<input id="txtExpectedDate" type="date" class="form-control" value="@ViewBag.OrderDate.ToString("yyyy-MM-dd")" name="headerLst" style="width:162px ;" />*@
                        <input id="txtExpectedDate" type="date" class="form-control" value="" name="headerLst" style="width:162px ;" />

                        <span class="text-danger"></span>
                    </div>
                </div>

                <div class="row " style=" box-shadow: 0 0 10px 0 rgba(0, 0, 0, .1); margin-right:1px; margin-left:1px;margin-bottom:4px;margin-top:-4px">

                    <div class="form-group col-md-4">

                        <label style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Item"]</label>
                        <select id="itemName" class="form-control">
                            <option selected></option>
                            @* asp-items="" *@
                            @foreach (ItemClass itm in ViewBag.ItemName)
                            {
                                <option value="@itm.itemCode">@itm.itemName</option>

                            }


                        </select>
                    </div>
                    <div class="form-group col-md-1">
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Quantity"]</label>
                        <input type="number" step="any" class="form-control" name="transLst" id="qty" style="width:80px ;" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-1">
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Price"]</label>
                        <input type="number" step="any" class="form-control" name="transLst" id="price" style="width:80px ;" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-3">
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Item Note"]</label>
                        <input type="text" class="form-control" name="transLst" id="note" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-2">

                        <label id="lblTransDate" class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["date"]</label>
                        <input id="TransDate" type="date" class="form-control" name="headerLst" style="width:162px ;" value="" />
                        <span class="text-danger"></span>


                    </div>
                    <div class="form-group col-md-1">
                        <br />
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]"> </label>
                        <input type="button" class="form-control btn-primary" value="+" onclick="getRows()" />
                    </div>
                </div>

                <div style="width:100%;height:200px ;border-style: solid; border-color: #f1f0f0;border-width: thin;overflow-y:scroll" id="itemRowTbl">
                    <table class="table">
                        @* <thead class="thead-dark">*@
                        <thead style="background-color:#46688a;">
                            <tr class="row">
                                <th scope="col" style="color:#fff; display:none ;">@Localizer["Item code"]</th>
                                <th class="col-md-3" style="color:#fff;">@Localizer["Item Name"]</th>
                                <th class="col-md-1" style="color:#fff;">@Localizer["Quantity"]</th>
                                <th class="col-md-1" style="color:#fff;">@Localizer["Price"]</th>
                                <th class="col-md-1" style="color:#fff;">@Localizer["Total"]</th>
                                <th class="col-md-3" style="color:#fff;">@Localizer["Item Note"]</th>
                                <th class="col-md-2" style="color:#fff;">@Localizer["Date"]</th>
                                <th class="col-md-1" style="color:#fff;">@Localizer["Remove"]</th>
                            </tr>
                        </thead>
                        @* this body used to display the item for the user when add an item *@
                        <tbody id="myTable">

                            @*<tr>

                                    <td>
                                        sdf
                                    </td>

                                    <td>
                                        aa
                                    </td>
                                    <td>
                                        ddd
                                    </td>
                                    <td>
                                        ggg
                                    </td>
                                    <td>
                                        ffffff
                                    </td>
                                    <td>
                                        ffffff
                                    </td>
                                    <td>
                                        ffffff
                                    </td>
                                </tr>*@

                        </tbody>
                    </table>
                </div>

                <div class="row" style="margin-bottom:4px;margin-top:2px">

                    <div class="form-group col-md-3">
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Total"]</label>
                        <input type="number" step="any" class="form-control" name="headerLst" id="realTot" value="0" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-3">
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["TotalInBasic"]</label>
                        <input type="number" step="any" class="form-control" name="realBasicTot" id="realBasicTot" value="0" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-3">
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["General Note"]</label>
                        <input type="text" class="form-control" id="txtNote" name="headerLst" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-3">
                        <br />
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]"></label>
                        <div class="custom-file">
                            <input type="file" class="form-control custom-file-input" id="ufile" />
                            <label class="custom-file-label" style="@Localizer["text-align: left  ;direction: ltr"]">Choose File ...</label>
                        </div>
                    </div>

                </div>
                @*<div class="form-group">
                        <button class="btn btn-primary cursor" onclick="GetOrder()"> @Localizer["Create"]</button>
                    </div>*@
            </div>
            @ViewBag.message
            @section Scripts{
                <script>
                    $('.custom-file-input').on("change", function () {
                        var fileName = $(this).val().split("\\").pop();
                        $(this).next('.custom-file-label').html(fileName);
                    });




                </script>


            }
        </form>
        <div class="row">

            <div class="col-md-6">
                <button class="btn btn-primary cursor" onclick="GetOrder(0)"> @Localizer["Create"]</button>
            </div>

            <div class="col-md-6" style="float:right;">
                <button class="btn btn-primary cursor" style="float:right;" onclick="GetOrder(-1)"> @Localizer["Document"]</button>
            </div>

        </div>
    </div>

</div>

<script>
    function CheckExpectedDate() {
        debugger
        if ($('#txtExpectedDate').val() == '') {
             Swal.fire({
                    icon: 'error',
                    title: 'خطأ',
                     text: ' يجب ادخال التاريخ المتوقع للنشاط   '  ,
                    footer: 'PostOrder'
                 })
            return false
        }
        if ($('#NumberOfDayesAfter').val() == '0' || $('#NumberOfDayesAfter').val() == '') {
            return true
        }
         var excepteddate = new Date($('#txtExpectedDate').val());
          var now =new Date(Date.now());
            var diffTime = Math.abs(excepteddate - now);
        var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        if (diffDays < $('#NumberOfDayesAfter').val()) {
                var now3 = new Date();
                now3.setDate(now3.getDate() - 4);

                 Swal.fire({
                    icon: 'error',
                    title: 'خطأ',
                     text: ' يجب ان يكون التاريخ المتوقع للنشاط بعد  '  + $('#NumberOfDayesAfter').val() + ' ايام ' ,
                    footer: 'PostOrderStatus'
                 })
            return false
        }
        return true

    }



    function CheckOrderDate() {
           if ($('#NumberOfDayesBefore').val() == '0' || $('#NumberOfDayesBefore').val() == '') {
            return true
        }
         var orderddate = new Date($('#date').val());
          var now =new Date(Date.now());
            var diffTime = Math.abs(  now - orderddate);
        var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        if (diffDays > $('#NumberOfDayesBefore').val()) {
                var now3 = new Date();
                now3.setDate(now3.getDate() - 4);

                 Swal.fire({
                    icon: 'error',
                    title: 'خطأ',
                     text: ' يجب ان يكون تاريخ الطلبيه اقل من '  + $('#NumberOfDayesBefore').val() + ' ايام ' ,
                    footer: 'PostOrderStatus'
                 })
            return false
        }
        return true

    }
    function CheckForm() {
        var IsError=true;
        if($("#rateText").val() == 0 || $("#rateText").val() == '') {
            Swal.fire({
                    icon: 'error',
                    title: 'خطأ',
                     text: 'يجب ادخال سعر الصرف',
                    footer: 'PostOrderStatus'
            })
            IsError = false;
        }

         if ($("#realTot").val() == 0 || $("#realTot").val() == '') {
            Swal.fire({
                    icon: 'error',
                    title: 'خطأ',
                     text: 'يجب ادخال  المبلغ',
                    footer: 'PostOrderStatus'
            })
            IsError = false;
        }

          if ($("#realTot").val() == 0 || $("#realTot").val() == '') {
            Swal.fire({
                    icon: 'error',
                    title: 'خطأ',
                     text: 'يجب ادخال  المبلغ',
                    footer: 'PostOrderStatus'
            })
            IsError = false;
        }

          if ($("#txtNote").val() == 0 || $("#txtNote").val() == '') {
            Swal.fire({
                    icon: 'error',
                    title: 'خطأ',
                     text: 'يجب ادخال  الملاحظات العامه',
                    footer: 'PostOrder'
            })
            IsError = false;
        }


        return IsError
    }

    function CheckData(val, msg) {

        var IsError=true;
         if (val == 0 || val == '' || val==undefined) {
            Swal.fire({
                    icon: 'error',
                    title: 'خطأ',
                     text: msg,
                    footer: 'PostOrderStatus'
            })
            IsError = false;
        }
         return IsError
    }

        function ShowMessage( msg) {



            Swal.fire({
                    icon: 'error',
                    title: 'خطأ',
                     text: msg,
                    footer: ''
            })



    }
    // post order
    function GetOrder(status) {// make the whole order

        debugger

        //var Budget = document.getElementById('TxtTotalBudget');
        //var BudgetValue = Number(Budget.text);
        //alert(BudgetValue)
        //if ($('#realTot').val() < BudgetValue) {

        //    Swal.fire({
        //        icon: 'warning',
        //        title: 'خطأ',
        //        text: 'لقد تم تجاوز الموازنه',
        //        footer: 'Buddget'
        //    })
        //}



        //check ExpectaionDate and dayes before

        if (CheckExpectedDate() == false) {
           return;
        }
         if (CheckOrderDate() == false) {
           return;
        }
       if (CheckForm() == false) {
            return;
        }


        var OrderHeaderProjectCode = "0";
        var OrderHeaderBudgetLineCode = "0";
        var ProjectCode = document.getElementById('inputState2');
         if (  ProjectCode.text!=undefined ) {

             OrderHeaderProjectCode = ProjectCode.text;

        }
        if (document.getElementById("inputState2").style.visibility  == "visible") {
            if (CheckData(OrderHeaderProjectCode,"يجب ادخال المشروع") == false) { return;}
        }

        var OrderTypeCode = document.getElementById('inputState3');
        var OrderHeaderOrderTypeCode = OrderTypeCode.text;
        var BudgetLineCode = document.getElementById('cmbBudgetLine');
       // BudgetLineCode != 'undefined' ||
        if (BudgetLineCode != null) {
            if (BudgetLineCode.value != undefined) {
                     OrderHeaderBudgetLineCode = BudgetLineCode.value; //this get budgetline name
            }
             if (document.getElementById("cmbBudgetLine").hidden == false && document.getElementById("inputState2").style.visibility  == "visible") {

            if (CheckData(OrderHeaderBudgetLineCode, "يجب ادخال بند الموازنه") == false) { return; }
        }
        }

        var currencey = document.getElementById('cmbCurrency');
        var OrderHeaderCurrencey = currencey.text;

           if (CheckData(OrderHeaderCurrencey,"يجب ادخال العمله") == false) { return;}
           if (CheckData(OrderHeaderOrderTypeCode, "يجب ادخال نوع الطلبيه ") == false) { return;}
       //   if ( CheckData(OrderHeaderProjectCode, "يجب ادخال المشروع ") == false) { return;}



        var loader = document.getElementById("loader");
        loader.style.display = "block";
        var HeaderList = new Array();

        var headerModel = {

          //  OrderHeaderdepartmentCode: OrderHeaderdepartmentCode,
            OrderHeaderProjectCode: OrderHeaderProjectCode,
            OrderHeaderdate: $('#date').val(),
            OrderHeaderOrderTypeCode: OrderHeaderOrderTypeCode,
            OrderHeaderBudgetLineCode: OrderHeaderBudgetLineCode,
            OrderHeaderCurrencey: OrderHeaderCurrencey,
            OrderHeaderRate: $("#rateText").val(),
            OrderHeaderNote: $("#txtNote").val(),
            OrderHeaderRealTotal: $('#realTot').val(),
            ExpectedDate: $('#txtExpectedDate').val(),
        };

        var TableData = new Array();


        $('#myTable tr').each(function (row, tr) {
            TableData[row] = {
                "TransactionItemName": $(tr).find('td:eq(1)').text()
                , "TransactionQty": $(tr).find('td:eq(2)').text()
                , "TransactionPrice": $(tr).find('td:eq(3)').text()
                , "TransactionNote": $(tr).find('td:eq(5)').text()
                , "TransactionDate": $(tr).find('td:eq(6)').text()

            }
        });
        if (TableData.length == 0) {
            ShowMessage("يجب ادخال اصناف ")
            return;
        }
        $.ajax({
            type: "POST",
            dataType: "json",
            url: "../OrderView/PostOrder",
            data: {
                headerLst: headerModel,
                TransLst: TableData,
            },
            success: function (response) {
                console.log("handle response :" + response.data);
                if (response.data > 0) {
                    PostOrderStatus(response.data, status);
                    addPic(response.data);
                     document.location = '/Home/Index';
                }



            },
            error: function (response) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'خطأ في التخزين !',
                    footer: 'GetOrder'
                })
                console.log("just die... please" + "  " + response.data);
            },
        });


    }




    function PostOrderStatus(approvalHeaderCode, approvalIsApproved) {

    //    debugger
        if (approvalIsApproved == 0) {
            $.ajax({
                type: "POST",
                dataType: "json",
                url: "/Home/CreateOrderStatus",
                data: {
                    ApprovalHeaderCode: approvalHeaderCode, ApprovalIsApproved: approvalIsApproved, Notes: ''

                },
                success: function (response) {
                    // console.log("handle response :" + response.data);



                },
                error: function (response) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: ' خطأ في التخزين !',
                        footer: 'PostOrderStatus'
                    })
                    loader.style.display = "none";
                    console.log("error in PostOrderStatus function in create view" + "  " + response.data);
                },
            });
        } else {

              $.ajax({
            type: "POST",
            dataType: "json",
            url: "/Home/CreateOrderStatusAsDocuments",
            data: {
                ApprovalHeaderCode: approvalHeaderCode, ApprovalIsApproved: approvalIsApproved, Notes: ''

            },
            success: function (response) {
                // console.log("handle response :" + response.data);



            },
            error: function (response) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: ' خطأ في التخزين !',
                    footer: 'PostOrderStatus'
                })
                loader.style.display = "none";
                console.log("error in PostOrderStatus function in create view" + "  " + response.data);
            },
        });

        }


    }

    function getshowhidefunder(id) {
        $.ajax(
            {
                url: "../OrderView/getshowhidefunder",
                data: { ordertype: id },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    document.getElementById("inputState2").style.visibility = data.data;
                    document.getElementById("inputState2Lbl").style.visibility = data.data;


                    console.log("success Visible  == " + data.data);
                },
                error: function (message) {
                    // console.log("Error In Uploading");
                    console.log(message);
                },

            });
    }

    function getshowhidebudgetline(id) {
        $.ajax(
            {
                url: "../OrderView/getshowhidebudgetline",
                data: { ordertype: id },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    document.getElementById("inputState4").style.visibility = data.data;
                    document.getElementById("inputState4Lbl").style.visibility = data.data;
                    console.log("success Visible  == " + data.data);
                },
                error: function (message) {
                    // console.log("Error In Uploading");
                    console.log(message);
                },

            });
    }

     function getshowhidebudgetline(id) {
        $.ajax(
            {
                url: "../OrderView/getshowhideTransactionDate",
                data: { ordertype: id },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    document.getElementById("TransDate").style.visibility = data.data;
                     document.getElementById("lblTransDate").style.visibility = data.data;


                },
                error: function (message) {
                    // console.log("Error In Uploading");
                    console.log(message);
                },

            });
    }

    function getOrderType(id) {
       // debugger
        $.ajax(
            {
                url: "../OrderView/GetOrderType",
                data: { ordertype: id },
                dataType: "json",
                type: "POST",
                success: function (data) {

                    var NumberOfDayesBefore = document.getElementById("NumberOfDayesBefore");
                    NumberOfDayesBefore.setAttribute('value', data.numberOfDayesBefore);
                    var NumberOfDayesAfter = document.getElementById("NumberOfDayesAfter");
                     NumberOfDayesAfter.setAttribute('value', data.numberOfDayesAfter);


                },
                error: function (message) {
                    // console.log("Error In Uploading");
                    console.log(message);
                },

            });
    }

    function getRate(id) {//get rate for each currency
        $.ajax(
            {
                url: "../OrderView/getRate",
                data: { rateId: id },
                dataType: "json",
                type: "POST",
                success: function (data) {
                    document.getElementById("rateText").value = data.data;
                    console.log("success rate  == " + data.data);
                },
                error: function (message) {
                    console.log("Error In Uploading");
                    console.log(message);
                },

            });

    }

    function addPic(orderHeaderCode) {//add the file to its table using formdata
        if (orderHeaderCode != 0) {
            //debugger
            // alert(orderHeaderCode)
            var formData = new FormData();
            formData.append('file', $('#ufile')[0].files[0]);
            formData.append('OrderHeaderCode', orderHeaderCode);
            $.ajax(
                {
                    url: "../OrderView/UploadFile",
                    data: formData,
                    processData: false,
                    contentType: false,
                    type: "POST",
                    enctype: "multipart/form-data",
                    success: function (data) {
                        console.log("File Uploaded Successfully");

                        Swal.fire('Good job!',
                            'تم حفظ الطلبيه',
                            'success'
                        )
                      loader.style.display = "none";

                    },
                    error: function (message) {
                        console.log("Error In Uploading");
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'خطأ في التخزين !',
                            footer: 'PostOrderStatus'
                        })
                        loader.style.display = "none";
                        //document.location = '/Home/Index';
                    }
                });
            // document.location = '/Home/Index';
        }
    }


    var transArr = [];// store each transaction item
    function getRows() { // display the transaction for the user when he clicks the (+)Button
        //debugger
     if (CheckData(document.getElementById('itemName').value, "يجب ادخال  الصنف") == false) { return; }

        if (CheckData(document.getElementById('qty').value, "يجب ادخال الكميه") == false) { return; }
        if (CheckData(document.getElementById('price').value, "يجب ادخال السعر") == false) { return; }

        document.getElementById("itemRowTbl").style.visibility = "visible";
        //var itemcode = document.getElementById('itemName').value;
        //var itemName = $("#itemName option:selected").text();

        //var y = $("#itemName").find('es-list').find("es-visible");

        var itemcode = document.getElementById('itemName').text;
        var itemName = document.getElementById('itemName').value;
        var qty = document.getElementById('qty').value;
        var price = document.getElementById('price').value;
        var note = document.getElementById('note').value;
        var TransDate = document.getElementById('TransDate').value;




        var table = document.getElementById("myTable");
        var row = table.insertRow(0);
        row.className = "row";
        var cell0 = row.insertCell(0); cell0.style.display = 'none';
        var cell1 = row.insertCell(1); cell1.className = "col-md-3";
        var cell2 = row.insertCell(2); cell2.className = "col-md-1";
        var cell3 = row.insertCell(3); cell3.className = "col-md-1";
        var cell4 = row.insertCell(4); cell4.className = "col-md-1";
        var cell5 = row.insertCell(5); cell5.className = "col-md-3";
        var cell6 = row.insertCell(6); cell6.className = "col-md-2";

        var cell7 = row.insertCell(7); cell7.className = "col-md-1";

        cell0.innerHTML = itemcode;
        cell1.innerHTML = itemName;

        cell2.innerHTML = qty;
        cell3.innerHTML = price;
        cell4.innerHTML = qty * price;
        cell5.innerHTML = note;
        cell6.innerHTML = TransDate;
        var x = qty * price;
        cell7.innerHTML = '<button id="DeleteButton" type="button" class="close danger" aria-label="Close" onClick="Remove(this , ' + x + ')"><span aria-hidden="true">&times;</span></button>';

        var TransactionClass = function (itemcode, itemName, Quantity, Price, Note, TransDate) {
            this.TransactionItemCode = itemcode;
            this.TransactionItemName = itemName;
            this.TransactionQty = Quantity;
            this.TransactionPrice = Price;
            this.TransactionNote = Note;
            this.TransDate = TransDate;
        };

        transArr.push((new TransactionClass(itemcode, itemName, qty, price, note, TransDate)));

        document.getElementById('qty').innerHTML = "";
        document.getElementById('price').innerHTML = "";
        document.getElementById('note').innerHTML = "";

        var realTotal = parseInt(document.getElementById("realTot").value) + (qty * price);
        document.getElementById("realTot").value = realTotal;

        var realBasicTot = parseInt(document.getElementById("realBasicTot").value) + (qty * price * parseFloat(document.getElementById("rateText").value)) ;
        document.getElementById("realBasicTot").value = realBasicTot;

    }


    function Remove(td, amount) {
        row = td.parentElement.parentElement;

        document.getElementById("myTable").deleteRow(row.rowIndex - 1);
        var realTotal = parseFloat(document.getElementById("realTot").value) - (amount);
         var realBasicTotal = parseFloat(document.getElementById("realBasicTot").value) - (amount * parseFloat(document.getElementById("rateText").value));

        if (parseFloat(realTotal) < 0) {
            document.getElementById("realTot").value = 0;
             document.getElementById("realBasicTot").value = 0;
        } else {
            document.getElementById("realTot").value = realTotal;
             document.getElementById("realBasicTot").value = realBasicTotal;
        }

    }



    // Combo Box Scrit

    $('#inputState1').editableSelect();
    $('#inputState2').editableSelect();
    $('#inputState3').editableSelect();
    // $('#inputState4').editableSelect();
    $('#cmbCurrency').editableSelect();
    $('#itemName').editableSelect();

    $('#itemname')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
            alert(li.val())
            //debugger
            var txt = document.getElementById('itemname');
            txt.text = li.val();


        });

    $('#cmbCurrency')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
            // alert(li.val())
            getRate(li.val());

            var txt = document.getElementById('cmbCurrency');
            txt.text = li.val();


        });

    $('#inputState1')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
            // alert(li.val())

            var txt = document.getElementById('inputState1');
            txt.text = li.val();
            //     txt.vlaue = li.text();
            //li.text()

        });

    $('#inputState2')
        .editableSelect()
        .on('select.editable-select', function (e, li) {

            GetBudgetLineByFunder(li.val())
            var txt = document.getElementById('inputState2');
            txt.text = li.val();
            // txt.vlaue = li.text();

        });


    $('#inputState3')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
            // alert(li.val())
           // debugger
            var txt = document.getElementById('inputState3');
            txt.text = li.val();

            getshowhidefunder(li.val());
            getshowhidebudgetline(li.val());

             getOrderType(li.val());

        });





    function GetBudgetLineByFunder(id) {
        //debugger
        $.ajax({
              url: '@Url.Action("GetBudgetLineByFunder")',
         //   url: "../OrderView/GetBudgetLineByFunder",
            type: 'POST',
            data: { "Fundercode": id }
        }).done(function (data) {
            $("#div1").html(data);
        });

    }
</script>
