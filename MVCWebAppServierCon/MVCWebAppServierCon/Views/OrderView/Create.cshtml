@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = "Create";
}

<script>
    var there_is_error = @Json.Serialize(ViewBag.Error_inProjectLoad);
    //debugger
        if (there_is_error != null) {
            alert(there_is_error+"Or table Not Found");
        }
</script>

<script src="~/lib/jquery/selectbox/dist/jquery-editable-select.js"></script>
<link href="~/lib/jquery/selectbox/dist/jquery-editable-select.css" rel="stylesheet" />

@*<script src="//code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="//rawgithub.com/indrimuska/jquery-editable-select/master/dist/jquery-editable-select.min.js"></script>
    <link href="//rawgithub.com/indrimuska/jquery-editable-select/master/dist/jquery-editable-select.min.css" rel="stylesheet">*@

<!-- Script -->

<style>

    .loader {
        position: fixed;
        top: 50%;
        left: 50%;
        margin-top: -50px;
        margin-left: -100px;
        height: 120px;
        width: 120px;
    }
</style>
<link href="~/css/FixedTable.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@9"></script>


<br />
<br />
<br />
<br />

<div class="row">

    <div id="loader" class="spinner-border text-warning loader" role="status" style="display:none;">
        <span class="sr-only">Loading...</span>
    </div>
    <div class="col-md-12">
        <form onkeydown="return event.key != 'Enter';">
            <input type="hidden" id="NumberOfDayesBefore" />
            <input type="hidden" id="NumberOfDayesAfter" />

            <div class="container card" style=" box-shadow: 0 0 10px 0 rgba(0, 0, 0, .1);padding: 30px;padding-top: 19px;">
                <div class="form-row" style="margin-top:15px ; ">
                    <h4 style="">@Localizer["Create OrderView"]</h4>

                </div>
                <div style="margin-top:-8px ; ">
                    <hr />
                </div>
                <div class="form-row" style="margin-top:-8px ; ">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    @if (ViewBag.Show_Order_Type)
                    {
                        <div class="form-group col-md-3">
                            <br />
                            <label for="inputState" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Order Type"]</label>
                            <select id="inputState3" class="form-control" name="headerLst">
                                <option selected></option>
                                @* asp-items="" *@
                                @foreach (OrderTypeClass ord in ViewBag.OrderType)
                                {
                                    <option value="@ord.orderTypeCode">@ord.orderTypeName</option>
                                }


                            </select>
                            <span class="text-danger"></span>
                        </div>
                    }
                    @if (ViewBag.Show_ToEmployee)
                    {
                        <div class="form-group  @(ViewBag.Show_Order_Type ? "col-md-3" : "col-md-3")">

                            <br />
                            <label style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["To Employee"]</label>
                            <input style="display:none;" id="to_employee_input" />
                            <select id="user_select_input" class="form-control">
                                <option selected></option>
                                @* asp-items="" *@
                                @foreach (UserClass itm in ViewBag.users)
                                {
                                    <option value="@itm.userCode">@itm.userName</option>
                                }


                            </select>
                        </div>
                    }


                    @*<div class="form-group col-md-3">
                            <br />
                            <label for="inputState" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Department"]</label>
                            <select id="inputState1" class="form-control" name="headerLst">
                                <option selected></option>
                                @foreach (DepartmentClass dep in ViewBag.DepartmentName)
                                {
                                    <option value="@dep.departmentCode">@dep.departmentName</option>
                                }


                            </select>
                             asp-items=""

                            <span class="text-danger"></span>
                        </div>*@

                    <div class="form-group @(ViewBag.Show_Order_Type ? "col-md-2" : "col-md-3")">
                        <br />
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Department Name"]</label>
                        <input id="department_code_input" value="@ViewBag.UserDepartmentCode" style="display:none;" />
                        <input value="@ViewBag.UserDepartmentName" type="text" class="form-control" id="txtdep" disabled />
                        <span class="text-danger"></span>
                    </div>

                    <div class="form-group @(ViewBag.Show_Order_Type ? "col-md-1" : "col-md-2")">
                        <br />
                        <label for="inputState" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Currency"]</label>
                        <select id="cmbCurrency" class="form-control" name="headerLst">
                            <option selected></option>
                            @foreach (CurrencyViewModel item in ViewBag.Currency)
                            {
                                <option value="@item.currencyCode">@item.currencyName</option>
                            }
                        </select>

                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-1">
                        <br />
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Rate"]</label>
                        @* value="@ViewBag.Rate" *@
                        <input type="number" step="any" class="form-control" name="headerLst" id="rateText" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group @(ViewBag.Show_Order_Type ? "col-md-2" : "col-md-3")">
                        <br />
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["order date"]</label>
                        <input id="date" type="date" disabled class="form-control" value="" name="headerLst" />
                        <script>
                            var date = new Date(@Json.Serialize(@ViewBag.OrderDate));
                            var day_0 = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
                            var month_0 = date.getMonth() < 10 ? "0" + (date.getMonth() + 1) : date.getMonth()+1
                            var date_format = date.getFullYear() + "-" + month_0 + "-" + day_0;
                            document.getElementById("date").value = date_format;
                        </script>

                        @*@{var x = @Convert.ToDateTime(@ViewBag.OrderDate).ToString("dd/MM/yyyy}");}
                            <input id="date" class="form-control" name="headerLst" value="@x" maxlength="10" type="date"  />*@


                        <span class="text-danger"></span>
                    </div>
                </div>
                <div class="row">

                    <div class="form-group col-md-3">

                        <label id="inputState2Lbl" for="inputState" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer[ViewBag.Display_Name_Project == null ? "Project" : ViewBag.Display_Name_Project]</label>
                        <select id="inputState2" class="form-control" name="headerLst">
                            <option selected></option>
                            @* asp-items="" *@
                            @foreach (CostsViewModel costs in ViewBag.ProjectName)
                            {
                                <option value="@costs.costCode">@costs.costName</option>
                            }
                        </select>
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-3" id="div1">
                        @*<label id="inputState4Lbl" for="inputState" style="@Localizer["text-align: left  ;direction: ltr;visibility:hidden"]">@Localizer["Budget Line"]</label>
                            <select id="inputState4" class="form-control" name="headerLst" style="visibility:hidden">
                                <option selected></option>

                                @foreach (CostsViewModel costs in ViewBag.BudgetLine)
                                {
                                    <option value="@costs.costCode">@costs.costName</option>
                                }


                            </select>*@
                    </div>
                    <div class="form-group col-md-3">

                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Expected Date"]</label>
                        @*<input id="txtExpectedDate" type="date" class="form-control" value="@ViewBag.OrderDate.ToString("yyyy-MM-dd")" name="headerLst" style="width:162px ;" />*@
                        <input id="txtExpectedDate" type="date" class="form-control" value="" name="headerLst" />

                        <span class="text-danger"></span>
                    </div>
                    @if (ViewBag.Show_ToDate)
                    {
                        <div class="form-group col-md-3">

                            <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["To Date"]</label>
                            <input id="txtToDate" type="date" class="form-control" value="" name="headerLst" />

                            <span class="text-danger"></span>
                        </div>
                    }
                </div>

                <div class="row">
                    @if (ViewBag.Show_Doner2)
                    {
                        <div class="form-group col-md-4">
                            <label id="Doner2_label" for="Doner2_input" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer[(ViewBag.Display_Name_Doner2 != null ? ViewBag.Display_Name_Doner2 : "Not Specified")]</label>
                            <select id="Doner2_input" class="form-control" name="headerLst">
                                <option selected></option>
                                @* asp-items="" *@
                                @foreach (CostsViewModel costs in ViewBag.Doner_List)
                                {
                                    <option value="@costs.costCode">@costs.costName</option>
                                }
                            </select>
                            <span class="text-danger"></span>
                        </div>
                    }
                    @if (ViewBag.Show_cost3)
                    {
                        <div class="form-group col-md-4">

                            <label id="cost3_label" for="cost3_input" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer[(ViewBag.Display_Name_cost3 != null ? ViewBag.Display_Name_cost3 : "Not Specified")]</label>
                            <select id="cost3_input" class="form-control" name="headerLst">
                                <option selected></option>
                                @* asp-items="" *@
                                @foreach (CostsViewModel costs in ViewBag.cost3_List)
                                {
                                    <option value="@costs.costCode">@costs.costName</option>
                                }
                            </select>
                            <span class="text-danger"></span>
                        </div>
                    }
                    @if (ViewBag.Show_cost4)
                    {
                        <div class="form-group col-md-4">

                            <label id="cost4_label" for="cost4_input" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer[(ViewBag.Display_Name_cost4 != null ? ViewBag.Display_Name_cost4 : "Not Specified")]</label>
                            <select id="cost4_input" class="form-control" name="headerLst">
                                <option selected></option>
                                @* asp-items="" *@
                                @foreach (CostsViewModel costs in ViewBag.cost4_List)
                                {
                                    <option value="@costs.costCode">@costs.costName</option>
                                }
                            </select>
                            <span class="text-danger"></span>
                        </div>
                    }
                </div>
                <div class="" style="    border-radius: 6px;    border: 2px solid #46688a;     margin-top: 9px;">
                    <div class="row " style="margin: 0 1px -2px 1px;  padding: 12px 0 0 0;">

                        <div class="form-group col-md-2">

                            <label style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Item"]</label>
                            <select id="itemName" class="form-control">
                                <option selected></option>
                                @* asp-items="" *@
                                @foreach (ItemClass itm in ViewBag.ItemName)
                                {
                                    <option value="@itm.itemCode">@itm.itemName</option>

                                }


                            </select>
                        </div>
                        @if (ViewBag.Show_Unit)
                        {
                            <div class="form-group col-md-1">
                                <label class="control-label" style="@Localizer["text-align: left  ;dm irection: ltr"]">@Localizer["Unit"]</label>
                                <input class="form-control" type="text" id="Unit_input" disabled />
                            </div>
                        }


                        <div class="form-group @(ViewBag.Show_Unit ? "col-md-1" : "col-md-2")">
                            <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Quantity"]</label>
                            <input type="number" step="any" class="form-control" name="transLst" id="qty" />
                            <span class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-2">
                            <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Price"]</label>
                            <input type="number" step="any" class="form-control" name="transLst" id="price" />
                            <span class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-3">
                            <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Item Note"]</label>
                            <input type="text" class="form-control" name="transLst" id="note" />
                            <span class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-2">

                            <label id="lblTransDate" class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["date"]</label>
                            <input id="TransDate" type="date" class="form-control" name="headerLst" style="width:162px ;" value="" />
                            <span class="text-danger"></span>


                        </div>
                        <div class="form-group col-md-1">
                            <br />
                            <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]"> </label>
                            <input type="button" class="form-control btn-primary" value="+" onclick="getRows()" />
                        </div>
                    </div>

                    <div style="width:100%;height:200px ; overflow-y:auto" id="itemRowTbl">
                        <table class="table">
                            @* <thead class="thead-dark">*@
                            <thead style="background-color:#46688a;">
                                <tr class="row" style="width: 100%; margin: 0;">
                                    <th scope="col" style="color:#fff; display:none ;">@Localizer["Item code"]</th>
                                    <th class="col-md-2" style="color:#fff;">@Localizer["Item Name"]</th>
                                    @if (ViewBag.Show_Unit)
                                    {
                                        <th class="col-md-1" style="color:#fff;">@Localizer["Unit"]</th>
                                    }
                                    <th class="col-md-1" style="color:#fff;">@Localizer["Quantity"]</th>
                                    <th class="col-md-1" style="color:#fff;">@Localizer["Price"]</th>
                                    <th class="col-md-1" style="color:#fff;">@Localizer["Total"]</th>
                                    <th class="col-md-3" style="color:#fff;">@Localizer["Item Note"]</th>
                                    <th class="col-md-2" style="color:#fff;">@Localizer["Date"]</th>
                                    <th class="@(ViewBag.Show_Unit ? "col-md-1" : "col-md-2")" style="color:#fff;">@Localizer["Remove"]</th>
                                </tr>
                            </thead>
                            @* this body used to display the item for the user when add an item *@
                            <tbody id="myTable">

                                @*<tr>

                                        <td>
                                            sdf
                                        </td>

                                        <td>
                                            aa
                                        </td>
                                        <td>
                                            ddd
                                        </td>
                                        <td>
                                            ggg
                                        </td>
                                        <td>
                                            ffffff
                                        </td>
                                        <td>
                                            ffffff
                                        </td>
                                        <td>
                                            ffffff
                                        </td>
                                    </tr>*@

                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="row" style="margin-top: 20px;">

                    <div class="form-group col-md-3">
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["Total"]</label>
                        <input type="number" step="any" class="form-control" name="headerLst" id="realTot" value="0" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-3">
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["TotalInBasic"]</label>
                        <input type="number" step="any" class="form-control" name="realBasicTot" id="realBasicTot" value="0" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-3">
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]">@Localizer["General Note"]</label>
                        <input type="text" class="form-control" id="txtNote" name="headerLst" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-group col-md-3">
                        <br />
                        <label class="control-label" style="@Localizer["text-align: left  ;direction: ltr"]"></label>
                        <div class="custom-file">
                            <input type="file" class="form-control custom-file-input" id="ufile" />
                            <label class="custom-file-label" style="@Localizer["text-align: left  ;direction: ltr"]">Choose File ...</label>
                        </div>
                    </div>

                </div>
                @*<div class="form-group">
                        <button class="btn btn-primary cursor" onclick="GetOrder()"> @Localizer["Create"]</button>
                    </div>*@
            </div>
            @ViewBag.message
            @section Scripts{
                <script>
                    $('.custom-file-input').on("change", function () {
                        var fileName = $(this).val().split("\\").pop();
                        $(this).next('.custom-file-label').html(fileName);
                    });




                </script>


            }
        </form>
        <div class="row">

            <div class="col-md-6">
                <button class="btn btn-primary cursor" onclick="GetOrder(0)"> @Localizer["Create"]</button>
            </div>

            <div class="col-md-6" style="float:right;">
                <button class="btn btn-primary cursor" style="float:right;" onclick="GetOrder(-1)"> @Localizer["Document"]</button>
            </div>

        </div>
    </div>

</div>

<script>


    if (@Json.Serialize(ViewBag.Show_ToEmployee)) {
        document.getElementById("user_select_input").addEventListener("change", () => {
            console.log(document.getElementById("user_select_input").value);
            var user_code = document.getElementById("user_select_input").value;
            var dep_id = -1;
            var users_array = @Json.Serialize(ViewBag.users)
                console.log(users_array)
            users_array.map(user => {
                if (user.userCode == user_code) {
                    dep_id = user.userDepartmentCode
                }
            });

            console.log(dep_id)
            $.ajax({
                url: '@Url.Action("GetDepartmentName")',
                data: { dep_Code: dep_id },
                success: (result) => {
                    console.log(result.name)
                    document.getElementById("txtdep").value = result.name
                    document.getElementById("department_code_input").value = result.code
                }
            })
        });
    }


    function CheckExpectedDate() {
                                debugger
        if ($('#txtExpectedDate').val() == '') {
                                    Swal.fire({
                                    icon: 'error',
                    title: 'خطأ',
                     text: ' يجب ادخال التاريخ المتوقع للنشاط   '  ,
                    footer: 'PostOrder'
                                        })
            return false
        }
                                if ($('#NumberOfDayesAfter').val() == '0' || $('#NumberOfDayesAfter').val() == '') {
                                    return true
                                }
                                var excepteddate = new Date($('#txtExpectedDate').val());
                                var now =new Date(Date.now());
                                var diffTime = Math.abs(excepteddate - now);
                                var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                                if (diffDays < $('#NumberOfDayesAfter').val()) {
                                    var now3 = new Date();
                                    now3.setDate(now3.getDate() - 4);

                                    Swal.fire({
                                    icon: 'error',
                    title: 'خطأ',
                     text: ' يجب ان يكون التاريخ المتوقع للنشاط بعد  '  + $('#NumberOfDayesAfter').val() + ' ايام ' ,
                    footer: 'PostOrderStatus'
                                    })
            return false
                                }
                                return true

    }



                            function CheckOrderDate() {
                                debugger
                                if ($('#NumberOfDayesBefore').val() == '0' || $('#NumberOfDayesBefore').val() == '') {
                                    return true
        }
                                var orderddate = new Date($('#date').val());
                                var now = new Date(Date.now());
                                var diffTime = Math.abs(now - orderddate);
                                var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                                if (diffDays > $('#NumberOfDayesBefore').val()) {
                                    var now3 = new Date();
                                    now3.setDate(now3.getDate() - 4);

                                    Swal.fire({
                                    icon: 'error',
                title: 'خطأ',
                text: ' يجب ان يكون تاريخ الطلبيه اقل من ' + $('#NumberOfDayesBefore').val() + ' ايام ',
                footer: 'PostOrderStatus'
                                    })
            return false
                                }
                                return true

    }
    function CheckForm() {
        var IsError = true;
        if ($("#rateText").val() == 0 || $("#rateText").val() == '') {
            Swal.fire({
                icon: 'error',
                title: 'خطأ',
                text: 'يجب ادخال سعر الصرف',
                footer: 'PostOrderStatus'
            })
            IsError = false;
        }

        if ($("#realTot").val() == 0 || $("#realTot").val() == '') {
            Swal.fire({
                icon: 'error',
                title: 'خطأ',
                text: 'يجب ادخال  المبلغ',
                footer: 'PostOrderStatus'
            })
            IsError = false;
        }

        if ($("#realTot").val() == 0 || $("#realTot").val() == '') {
            Swal.fire({
                icon: 'error',
                title: 'خطأ',
                text: 'يجب ادخال  المبلغ',
                footer: 'PostOrderStatus'
            })
            IsError = false;
        }

        if ($("#txtNote").val() == 0 || $("#txtNote").val() == '') {
            Swal.fire({
                icon: 'error',
                title: 'خطأ',
                text: 'يجب ادخال  الملاحظات العامه',
                footer: 'PostOrder'
            })
            IsError = false;
        }


        return IsError
    }

    function CheckData(val, msg) {

        var IsError = true;
        if (val == 0 || val == '' || val == undefined) {
            Swal.fire({
                icon: 'error',
                title: 'خطأ',
                text: msg,
                footer: 'PostOrderStatus'
            })
            IsError = false;
        }
        return IsError
    }

    function CheckDataCurrency(val, msg) {

        var IsError = true;
        if ((val == '' || val == undefined) && val != 0) {
            Swal.fire({
                icon: 'error',
                title: 'خطأ',
                text: msg,
                footer: 'PostOrderStatus'
            })
            IsError = false;
        }
        return IsError
    }

    function ShowMessage(msg) {



        Swal.fire({
            icon: 'error',
            title: 'خطأ',
            text: msg,
            footer: ''
        })



    }
                            // post order
    function GetOrder(status) {// make the whole order

        debugger

        //var Budget = document.getElementById('TxtTotalBudget');
        //var BudgetValue = Number(Budget.text);
        //alert(BudgetValue)
        //if ($('#realTot').val() < BudgetValue) {

        //    Swal.fire({
        //        icon: 'warning',
        //        title: 'خطأ',
        //        text: 'لقد تم تجاوز الموازنه',
        //        footer: 'Buddget'
        //    })
        //}



        //check ExpectaionDate and dayes before

        if (CheckExpectedDate() == false) {
            return;
        }
        if (CheckOrderDate() == false) {
            return;
        }
        if (CheckForm() == false) {
            return;
        }


        var OrderHeaderProjectCode = "0";
        var OrderHeaderBudgetLineCode = "0";
        var ProjectCode = document.getElementById('inputState2');
        if (ProjectCode.text != undefined) {

            OrderHeaderProjectCode = ProjectCode.text;
        }

        if (document.getElementById("inputState2").style.visibility == "visible") {
            if (CheckData(OrderHeaderProjectCode, "يجب ادخال المشروع") == false) { return; }
        }

        var OrderTypeCode;
        var OrderHeaderOrderTypeCode;

        if (@Json.Serialize(ViewBag.Show_Order_Type) == true) {
            OrderTypeCode = document.getElementById('inputState3');
            OrderHeaderOrderTypeCode = OrderTypeCode.text;
        }

        var BudgetLineCode = document.getElementById('cmbBudgetLine');
        // BudgetLineCode != 'undefined' ||
        if (BudgetLineCode != null) {
            debugger
            if (BudgetLineCode.value != undefined) {
                OrderHeaderBudgetLineCode = BudgetLineCode.value; //this get budgetline name
            }
            if (document.getElementById("cmbBudgetLine").hidden == false && document.getElementById("inputState2").style.visibility == "visible") {

                if (CheckData(OrderHeaderBudgetLineCode, "يجب ادخال بند الموازنه") == false) { return; }
            }
        }

        var currencey = document.getElementById('cmbCurrency');
        var OrderHeaderCurrencey = currencey.text;

        if (CheckDataCurrency(OrderHeaderCurrencey, "يجب ادخال العمله") == false) { return; }

        if (@Json.Serialize(ViewBag.Show_Order_Type) == true) {
            if (CheckData(OrderHeaderOrderTypeCode, "يجب ادخال نوع الطلبيه ") == false) { return; }
        }
        //   if ( CheckData(OrderHeaderProjectCode, "يجب ادخال المشروع ") == false) { return;}



        var loader = document.getElementById("loader");
        loader.style.display = "block";
        var HeaderList = new Array();
        var headerModel = {

            //  OrderHeaderdepartmentCode: OrderHeaderdepartmentCode,
            OrderHeaderProjectCode: OrderHeaderProjectCode,
            OrderHeaderdate: $('#date').val(),
            OrderHeaderBudgetLineCode: OrderHeaderBudgetLineCode,
            OrderHeaderCurrencey: OrderHeaderCurrencey,
            OrderHeaderRate: $("#rateText").val(),
            OrderHeaderNote: $("#txtNote").val(),
            OrderHeaderRealTotal: $('#realTot').val(),
            ExpectedDate: $('#txtExpectedDate').val(),
            ToEmployeeCode: "",
            OrderHeaderdepartmentCode: document.getElementById("department_code_input").value,
        };

        if (@Json.Serialize(ViewBag.Show_Order_Type) == true) {
            headerModel.OrderHeaderOrderTypeCode = OrderHeaderOrderTypeCode;
        }

        if (@Json.Serialize(ViewBag.Show_ToDate) == true) {
            headerModel.ToDate = $('#txtToDate').val();
        }


        if (@Json.Serialize(ViewBag.Show_Doner2) == true) {
            headerModel.Doner = document.getElementById('Doner2_input').value;
        }
        if (@Json.Serialize(ViewBag.Show_cost3) == true) {
            headerModel.Cost3 = document.getElementById('cost3_input').value;
        }
        if (@Json.Serialize(ViewBag.Show_cost4) == true) {
            headerModel.Cost4 = document.getElementById('cost4_input').value;
        }
        console.log(headerModel)
        debugger
        var TableData = new Array();

        if (@Json.Serialize(ViewBag.Show_Unit)) {
            $('#myTable tr').each(function (row, tr) {
                TableData[row] = {
                    "TransactionItemName": $(tr).find('td:eq(1)').text()
                    , "TransactionQty": $(tr).find('td:eq(3)').text()
                    , "TransactionPrice": $(tr).find('td:eq(4)').text()
                    , "TransactionNote": $(tr).find('td:eq(6)').text()
                    , "TransactionDate": $(tr).find('td:eq(7)').text()
                }
            });
        } else {
            $('#myTable tr').each(function (row, tr) {
                TableData[row] = {
                    "TransactionItemName": $(tr).find('td:eq(1)').text()
                    , "TransactionQty": $(tr).find('td:eq(2)').text()
                    , "TransactionPrice": $(tr).find('td:eq(3)').text()
                    , "TransactionNote": $(tr).find('td:eq(5)').text()
                    , "TransactionDate": $(tr).find('td:eq(6)').text()
                }
            });
        }

        if (TableData.length == 0) {
            ShowMessage("يجب ادخال اصناف ")
            return;
        }

        var data = {
            headerLst: headerModel,
            TransLst: TableData,
            ExpectedDate: $('#txtExpectedDate').val(),
            OrderHeaderdate: $('#date').val(),
        }

        if (@Json.Serialize(ViewBag.Show_ToDate) == true) {
            data.ToDate = $('#txtToDate').val();
        }

        debugger
        $.ajax({
            type: "POST",
            dataType: "json",
            url: "../OrderView/PostOrder",
            data: data,
            success: function (response) {
                console.log("handle response :" + response.data);
                if (response.data > 0) {
                    PostOrderStatus(response.data, status);
                    addPic(response.data);
                    document.location = '/Home/Index';
                }
            },
            error: function (response) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'خطأ في التخزين !',
                    footer: 'GetOrder'
                })
                console.log("just die... please" + "  " + response.data);
            },
        });


    }




    function PostOrderStatus(approvalHeaderCode, approvalIsApproved) {
        var data = {
            ApprovalHeaderCode: approvalHeaderCode,
            ApprovalIsApproved: approvalIsApproved,
            Notes: '',
        }

        if (@Json.Serialize(ViewBag.Show_ToEmployee) == true) {
            data.ToEmployeeCode = document.getElementById("user_select_input").value;
        }
        //    debugger
        if (approvalIsApproved == 0) {
            $.ajax({
                type: "POST",
                dataType: "json",
                url: "/Home/CreateOrderStatus",
                data: data,
                success: function (response) {
                    // console.log("handle response :" + response.data);

                },
                error: function (response) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: ' خطأ في التخزين !',
                        footer: 'PostOrderStatus'
                    })
                    loader.style.display = "none";
                    console.log("error in PostOrderStatus function in create view" + "  " + response.data);
                },
            });
        } else {

            $.ajax({
                type: "POST",
                dataType: "json",
                url: "/Home/CreateOrderStatusAsDocuments",
                data: {
                    ApprovalHeaderCode: approvalHeaderCode, ApprovalIsApproved: approvalIsApproved, Notes: ''

                },
                success: function (response) {
                    // console.log("handle response :" + response.data);



                },
                error: function (response) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: ' خطأ في التخزين !',
                        footer: 'PostOrderStatus'
                    })
                    loader.style.display = "none";
                    console.log("error in PostOrderStatus function in create view" + "  " + response.data);
                },
            });

        }


    }

                    function getshowhidefunder(id) {
        $.ajax(
                            {
                        url: "../OrderView/getshowhidefunder",
                data: { ordertype: id },
                dataType: "json",
                type: "POST",
                success: function (data) {
                                document.getElementById("inputState2").style.visibility = data.data;
                                document.getElementById("inputState2Lbl").style.visibility = data.data;


                                console.log("success Visible  == " + data.data);
                            },
                error: function (message) {
                                // console.log("Error In Uploading");
                                console.log(message);
                            },

            });
                    }

                    function getshowhidebudgetline(id) {
        $.ajax(
                            {
                        url: "../OrderView/getshowhidebudgetline",
                data: { ordertype: id },
                dataType: "json",
                type: "POST",
                success: function (data) {
                                document.getElementById("inputState4").style.visibility = data.data;
                                document.getElementById("inputState4Lbl").style.visibility = data.data;
                                console.log("success Visible  == " + data.data);
                            },
                error: function (message) {
                                // console.log("Error In Uploading");
                                console.log(message);
                            },

            });
                    }

                    function getshowhidebudgetline(id) {
        $.ajax(
                           {
                        url: "../OrderView/getshowhideTransactionDate",
                data: { ordertype: id },
                dataType: "json",
                type: "POST",
                success: function (data) {
                                document.getElementById("TransDate").style.visibility = data.data;
                                document.getElementById("lblTransDate").style.visibility = data.data;


                            },
                error: function (message) {
                                // console.log("Error In Uploading");
                                console.log(message);
                            },

            });
                    }

                    function getOrderType(id) {
       // debugger
        $.ajax(
                            {
                        url: "../OrderView/GetOrderType",
                data: { ordertype: id },
                dataType: "json",
                type: "POST",
                success: function (data) {

                                var NumberOfDayesBefore = document.getElementById("NumberOfDayesBefore");
                                NumberOfDayesBefore.setAttribute('value', data.numberOfDayesBefore);
                                var NumberOfDayesAfter = document.getElementById("NumberOfDayesAfter");
                                NumberOfDayesAfter.setAttribute('value', data.numberOfDayesAfter);


                            },
                error: function (message) {
                                // console.log("Error In Uploading");
                                console.log(message);
                            },

            });
                    }

                    function getRate(id) {//get rate for each currency
        $.ajax(
                            {
                        url: "../OrderView/getRate",
                data: { rateId: id },
                dataType: "json",
                type: "POST",
                success: function (data) {
                                document.getElementById("rateText").value = data.data;
                                console.log("success rate  == " + data.data);
                            },
                error: function (message) {
                                console.log("Error In Uploading");
                                console.log(message);
                            },

            });

                    }

                    function addPic(orderHeaderCode) {//add the file to its table using formdata
                        if (orderHeaderCode != 0) {
                            //debugger
                            // alert(orderHeaderCode)
                            var formData = new FormData();
                            formData.append('file', $('#ufile')[0].files[0]);
                            formData.append('OrderHeaderCode', orderHeaderCode);
            $.ajax(
                                {
                            url: "../OrderView/UploadFile",
                    data: formData,
                    processData: false,
                    contentType: false,
                    type: "POST",
                    enctype: "multipart/form-data",
                    success: function (data) {
                                    console.log("File Uploaded Successfully");

                                    Swal.fire('Good job!',
                                        'تم حفظ الطلبيه',
                                        'success'
                                    )
                      loader.style.display = "none";

                                },
                    error: function (message) {
                                    console.log("Error In Uploading");
                                    Swal.fire({
                                    icon: 'error',
                            title: 'Oops...',
                            text: 'خطأ في التخزين !',
                            footer: 'PostOrderStatus'
                                    })
                        loader.style.display = "none";
                                    //document.location = '/Home/Index';
                                }
                            });
                            // document.location = '/Home/Index';
                        }
                    }

                    function handle_item_changed(id , name) {

                        console.log(id);
                        console.log(name);
                        alert('true')
                    }
                    //document.getElementById('itemName').addEventListener("change", function () {
                    //})

                    var transArr = [];// store each transaction item
                    function getRows() { // display the transaction for the user when he clicks the (+)Button
                                         //debugger
                        if (CheckData(document.getElementById('itemName').value, "يجب ادخال  الصنف") == false) { return; }

                        if (CheckData(document.getElementById('qty').value, "يجب ادخال الكميه") == false) { return; }
                        if (CheckData(document.getElementById('price').value, "يجب ادخال السعر") == false) { return; }

                        document.getElementById("itemRowTbl").style.visibility = "visible";
                        //var itemcode = document.getElementById('itemName').value;
                        //var itemName = $("#itemName option:selected").text();

                        //var y = $("#itemName").find('es-list').find("es-visible");

                        var itemcode = document.getElementById('itemName').text;
                        var itemName = document.getElementById('itemName').value;
                        debugger
                        if (@Json.Serialize(ViewBag.Show_Unit) == true) {
                            var UnitName = document.getElementById('Unit_input').value;
                        }

                        var qty = document.getElementById('qty').value;
                        var price = document.getElementById('price').value;
                        var note = document.getElementById('note').value;
                        var TransDate = document.getElementById('TransDate').value;




                        var table = document.getElementById("myTable");
                        var row = table.insertRow(0);
                        row.className = "row";
                        row.style.width = "100%";
                        row.style.margin = "0";
                        if (@Json.Serialize(ViewBag.Show_Unit) == true) {
                            var cell0 = row.insertCell(0); cell0.style.display = 'none';
                            var cell1 = row.insertCell(1); cell1.className = "col-md-2";
                            var cell22 = row.insertCell(2); cell22.className = "col-md-1";
                            var cell2 = row.insertCell(3); cell2.className = "col-md-1";
                            var cell3 = row.insertCell(4); cell3.className = "col-md-1";
                            var cell4 = row.insertCell(5); cell4.className = "col-md-1";
                            var cell5 = row.insertCell(6); cell5.className = "col-md-3";
                            var cell6 = row.insertCell(7); cell6.className = "col-md-2";

                            var cell7 = row.insertCell(8); cell7.className = "col-md-1";
                            cell0.innerHTML = itemcode;
                            cell1.innerHTML = itemName;
                            cell22.innerHTML = UnitName;

                            cell2.innerHTML = qty;
                            cell3.innerHTML = price;
                            cell4.innerHTML = qty * price;
                            cell5.innerHTML = note;
                            cell6.innerHTML = TransDate;

                        } else {
                            var cell0 = row.insertCell(0); cell0.style.display = 'none';
                            var cell1 = row.insertCell(1); cell1.className = "col-md-2";
                            var cell2 = row.insertCell(2); cell2.className = "col-md-1";
                            var cell3 = row.insertCell(3); cell3.className = "col-md-1";
                            var cell4 = row.insertCell(4); cell4.className = "col-md-1";
                            var cell5 = row.insertCell(5); cell5.className = "col-md-3";
                            var cell6 = row.insertCell(6); cell6.className = "col-md-2";

                            var cell7 = row.insertCell(7); cell7.className = "col-md-2";
                            cell0.innerHTML = itemcode;
                            cell1.innerHTML = itemName;

                            cell2.innerHTML = qty;
                            cell3.innerHTML = price;
                            cell4.innerHTML = qty * price;
                            cell5.innerHTML = note;
                            cell6.innerHTML = TransDate;
                        }

                        var x = qty * price;
                        cell7.innerHTML = '<button id="DeleteButton" type="button" class="close danger" aria-label="Close" onClick="Remove(this , ' + x + ')"><span aria-hidden="true">&times;</span></button>';

                        var TransactionClass = function (itemcode, itemName, Quantity, Price, Note, TransDate) {
                            this.TransactionItemCode = itemcode;
                            this.TransactionItemName = itemName;
                            this.TransactionQty = Quantity;
                            this.TransactionPrice = Price;
                            this.TransactionNote = Note;
                            this.TransDate = TransDate;
                        };

                        transArr.push((new TransactionClass(itemcode, itemName, qty, price, note, TransDate)));

                        document.getElementById('qty').innerHTML = "";
                        document.getElementById('price').innerHTML = "";
                        document.getElementById('note').innerHTML = "";

                        var realTotal = parseInt(document.getElementById("realTot").value) + (qty * price);
                        document.getElementById("realTot").value = realTotal;

                        var realBasicTot = parseInt(document.getElementById("realBasicTot").value) + (qty * price * parseFloat(document.getElementById("rateText").value));
                        document.getElementById("realBasicTot").value = realBasicTot;

                    }


                    function Remove(td, amount) {
                        row = td.parentElement.parentElement;

                        document.getElementById("myTable").deleteRow(row.rowIndex - 1);
                        var realTotal = parseFloat(document.getElementById("realTot").value) - (amount);
                        var realBasicTotal = parseFloat(document.getElementById("realBasicTot").value) - (amount * parseFloat(document.getElementById("rateText").value));

                        if (parseFloat(realTotal) < 0) {
                            document.getElementById("realTot").value = 0;
                            document.getElementById("realBasicTot").value = 0;
                        } else {
                            document.getElementById("realTot").value = realTotal;
                            document.getElementById("realBasicTot").value = realBasicTotal;
                        }

                    }



    // Combo Box Scrit

    $('#inputState1').editableSelect();
    $('#inputState2').editableSelect();
    //$('#user_select_input').editableSelect();
    $('#inputState3').editableSelect();
    // $('#inputState4').editableSelect();
    $('#cmbCurrency').editableSelect();
    $('#itemName').editableSelect();

    $('#itemname')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
                        alert(li.val())
            //debugger
            var txt = document.getElementById('itemname');
                        txt.text = li.val();


                    });
    $('#itemName')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
                        debugger
                        var selected_item_id = li.val();

                        var items = @Json.Serialize(ViewBag.ItemName);
                        var units = @Json.Serialize(ViewBag.Units);

                        for (var i = 0; i < items.length; i++){
                            if (items[i].itemCode == selected_item_id) {
                                var unit_id = items[i].unit_Id;
                                var unit_name = "";

                                for (var i = 0; i < units.length; i++) {
                                    if (units[i].id == unit_id) {
                                        unit_name = units[i].name;
                                        break;
                                    }
                                }
                                //alert(unit_name)

                                if (@Json.Serialize(ViewBag.Show_Unit) == true) {
                                    document.getElementById("Unit_input").value = unit_name;
                                }
                                break;
                            }
                        }

                    });

    $('#cmbCurrency')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
                        // alert(li.val())
                        getRate(li.val());

                        var txt = document.getElementById('cmbCurrency');
                        txt.text = li.val();


                    });

    $('#inputState1')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
                        // alert(li.val())

                        var txt = document.getElementById('inputState1');
                        txt.text = li.val();
                        //     txt.vlaue = li.text();
                        //li.text()

                    });

    $('#inputState2')
        .editableSelect()
        .on('select.editable-select', function (e, li) {

                        GetBudgetLineByFunder(li.val())
            var txt = document.getElementById('inputState2');
                        txt.text = li.val();
                        // txt.vlaue = li.text();

                    });

    $('#inputState3')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
                        // alert(li.val())
                        // debugger
                        var txt = document.getElementById('inputState3');
                        txt.text = li.val();

                        getshowhidefunder(li.val());
                        getshowhidebudgetline(li.val());

                        getOrderType(li.val());

                    });





    function GetBudgetLineByFunder(id) {
        //debugger
        $.ajax({
                        url: '@Url.Action("GetBudgetLineByFunder")',
         //   url: "../OrderView/GetBudgetLineByFunder",
            type: 'POST',
            data: { "Fundercode": id }
                        }).done(function (data) {
            $("#div1").html(data);
                        });

                    }
</script>
